QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
View(QCs)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs)
print(QCs %>% select(-d18O.correct, -dD.correct))
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
View(iso.data)
iso.data
filter(str_detect(Sample_num, "STND") | str_detect(Sample_num, "QC"))
iso.data %>% filter(str_detect(Sample_num, "STND") | str_detect(Sample_num, "QC"))
iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) | str_detect(Sample_num, "QC", negate = TRUE))
?str_detect
so.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE))
iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE))
data.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE))
View(data.timp)
data.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11)
.
# Subset data to only Timp data
data.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
library(tidyverse)
library(here)
library(readxl)
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
data.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
# Divide data into spatially distributed set and snowpit data
?read_excel
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
View(field.notes)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
View(field.notes)
?left_join
test = left_join(data.timp, field.notes, by = c("Sample_ID" = "Sample"))
View(test)
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample"))
View(data.timp)
data.timp
left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>% mutate(Longitude = "Lon Fixed")
left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>% mutate(Longitude = `Lon Fixed`)
left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct)
test = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct)
View(test)
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev, d18O, dD, Description)
View(data.timp)
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev, d18O, dD, Description) %>% arrange(Sample_ID)
View(data.timp)
View(iso.data)
quit()
library(readxl)
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev, d18O, dD, Description) %>% arrange(Sample_ID)
# Divide data into spatially distributed set and snowpit data
View(data.timp)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
View(timp.space)
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
View(timp.space)
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34"))
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34"))
View(timp.depth)
?str_extract
?str_subset
str_split(timp.depth$Description, "cm")
?map
test = str_split(timp.depth$Description, "cm")
test[[1]]
test[[1,1]]
View(test)
test[[1]][1]
str_split(.$Description, "cm" %>% map(~ .x[1]))
1:10 %>%
map(rnorm, n = 10) %>%
map_dbl(mean)
?extract
df <- data.frame(x = c(NA, "a-b", "a-d", "b-c", "d-e"))
df %>% extract(x, "A")
View(df)
df %>% extract(x, c("A", "B"), "([[:alnum:]]+)-([[:alnum:]]+)")
timp.depth
timp.depth %>% extract(Description, "A")
timp.depth
timp.depth %>% str_remove(Description, "cm")
timp.depth %>% str_remove(Description, "[cm]")
timp.depth$Description %>% str_remove("[cm]")
timp.depth$Description %>% str_remove("cm")
timp.depth %>% mutate(Depth = as.numeric(.$Description %>% str_remove("cm")))
data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD)
?arrange
data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
rm(STNDs, QCs, iso.timp, field.notes)
rm(df, test)
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
rm(STNDs, QCs, name.i, std.i, iso.timp, field.notes)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
rm(STNDs, QCs, name.i, std.i, iso.timp, field.notes)
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Clean workspace variables
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Clean workspace variables
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
rm(list=ls())
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Clean workspace variables
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
plot(timp.depth$Depth.cm, timp.depth$dD)
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Elev.m, y=dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Elev.m, y=dD)) + geom_point() + geom_smooth(stat = "lm")
?geom_smooth
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Elev.m, y=dD)) + geom_point() + geom_smooth(method = "lm")
library(tidyverse)
library(here)
library(readxl)
# Import isotope data
iso.data = readRDS(here("Data/iso.data.rds"))
# Get values of known standards
STNDs = filter(iso.data, str_detect(iso.data$Sample_num, "STND")) %>% group_by(Sample_ID) %>%
summarise(d18O = mean(d18O.correct), dD = mean(dD.correct))
# Extract QC samples and compare value residuals from standards
QCs = filter(iso.data, str_detect(iso.data$Sample_num, "QC")) %>%
select(Sample_num, Sample_ID, d18O.correct, dD.correct) %>%
mutate(d18O.resid = rep(0, nrow(.)), dD.resid = rep(0, nrow(.)))
for (i in 1:nrow(QCs)) {
name.i = QCs$Sample_ID[i]
std.i = filter(STNDs, str_detect(STNDs$Sample_ID, name.i))
QCs$d18O.resid[i] = QCs$d18O.correct[i] - std.i$d18O
QCs$dD.resid[i] = QCs$dD.correct[i] - std.i$dD
}
print(QCs %>% select(-d18O.correct, -dD.correct))
# Subset data to only Timp data
iso.timp = iso.data %>%
filter(str_detect(Sample_num, "STND", negate = TRUE) & str_detect(Sample_num, "QC", negate = TRUE)) %>%
slice(-1:-11) %>% select(Sample_ID, d18O.correct, dD.correct)
# Load and clean sample field notes
field.notes = read_excel(here("Data/TIMP_Sample_List.xlsx"))
data.timp = left_join(iso.timp, field.notes, by = c("Sample_ID" = "Sample")) %>%
mutate(Longitude = `Lon Fixed`, Elev.m = `Elev (m)`, d18O = d18O.correct, dD = dD.correct) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, d18O, dD, Description)
# Divide data into spatially distributed set and snowpit data
timp.space = data.timp %>% filter(str_detect(Sample_ID, "R34", negate = TRUE))
timp.depth = data.timp %>% filter(str_detect(Sample_ID, "R34")) %>%
mutate(Depth.cm = as.numeric(.$Description %>% str_remove("cm"))) %>%
select(Sample_ID, Latitude, Longitude, Elev.m, Depth.cm, d18O, dD) %>% arrange(Depth.cm)
# Clean workspace variables
rm(STNDs, QCs, name.i, std.i, iso.data, iso.timp, field.notes)
ggplot(timp.space, aes(x=Longitude, y=Latitude, color = dD)) + geom_point() + scale_color_viridis_c()
ggplot(timp.space, aes(x=Elev.m, y=dD)) + geom_point() + geom_smooth(method = "lm")
library(ggmap)
citation("ggmap")
library(ggmap)
ggmap::register_google(key = "AIzaSyA1Xvh_VUDI97oVt7yXi-huOZxWGiYX0HQ")
View(timp.space)
bg = ggmap(get_googlemap(center = c(long = -111.64, lat = 40.39), maptype = "satellite"))
?ggmap
bg = ggmap(get_googlemap(center = c(lon = -111.64, lat = 40.39))
)
bg = ggmap(get_googlemap(center = c(lon = -122.335167, lat = 47.608013),
zoom = 11, scale = 2,
maptype ='terrain',
color = 'color'))
quit()
